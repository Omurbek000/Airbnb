# Generated by Django 5.2.6 on 2025-09-07 23:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(max_length=30, unique=True, verbose_name='Название страны')),
                ('country_name_en', models.CharField(max_length=30, null=True, unique=True, verbose_name='Название страны')),
                ('country_name_ru', models.CharField(max_length=30, null=True, unique=True, verbose_name='Название страны')),
                ('country_name_ky', models.CharField(max_length=30, null=True, unique=True, verbose_name='Название страны')),
                ('country_capital', models.CharField(max_length=30, unique=True, verbose_name='Столица')),
                ('country_currency', models.CharField(max_length=30, unique=True, verbose_name='Валюта')),
                ('country_image', models.ImageField(blank=True, null=True, upload_to='country/images', verbose_name='Флаг/Фото')),
            ],
            options={
                'verbose_name': 'Страна',
                'verbose_name_plural': 'Страны',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_role', models.CharField(choices=[('Admin', 'Администратор'), ('User', 'Пользователь'), ('Guest', 'Гость')], default='Guest', max_length=10, verbose_name='Роль')),
                ('user_age', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(100)], verbose_name='Возраст')),
                ('user_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region='KG', verbose_name='Телефон')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('user_country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='airbnb.country', verbose_name='Страна')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_name', models.CharField(max_length=100, verbose_name='Название города')),
                ('city_name_en', models.CharField(max_length=100, null=True, verbose_name='Название города')),
                ('city_name_ru', models.CharField(max_length=100, null=True, verbose_name='Название города')),
                ('city_name_ky', models.CharField(max_length=100, null=True, verbose_name='Название города')),
                ('city_capital', models.BooleanField(default=False, verbose_name='Столица страны?')),
                ('city_country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='airbnb.country', verbose_name='Страна')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
            },
        ),
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hotel_name', models.CharField(max_length=100, verbose_name='Название отеля')),
                ('hotel_name_en', models.CharField(max_length=100, null=True, verbose_name='Название отеля')),
                ('hotel_name_ru', models.CharField(max_length=100, null=True, verbose_name='Название отеля')),
                ('hotel_name_ky', models.CharField(max_length=100, null=True, verbose_name='Название отеля')),
                ('hotel_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region='KG', verbose_name='Телефон')),
                ('hotel_description', models.TextField(max_length=1000, verbose_name='Описание отеля')),
                ('hotel_description_en', models.TextField(max_length=1000, null=True, verbose_name='Описание отеля')),
                ('hotel_description_ru', models.TextField(max_length=1000, null=True, verbose_name='Описание отеля')),
                ('hotel_description_ky', models.TextField(max_length=1000, null=True, verbose_name='Описание отеля')),
                ('hotel_stars', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Количество звёзд')),
                ('hotel_address', models.CharField(max_length=100, verbose_name='Адрес отеля')),
                ('hotel_address_en', models.CharField(max_length=100, null=True, verbose_name='Адрес отеля')),
                ('hotel_address_ru', models.CharField(max_length=100, null=True, verbose_name='Адрес отеля')),
                ('hotel_address_ky', models.CharField(max_length=100, null=True, verbose_name='Адрес отеля')),
                ('hotel_create_date', models.DateTimeField(auto_now_add=True)),
                ('hotel_update_date', models.DateTimeField(auto_now=True)),
                ('hotel_video', models.FileField(blank=True, null=True, upload_to='hotel/video', verbose_name='Видео')),
                ('hotel_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена за ночь')),
                ('hotel_city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hotels', to='airbnb.city', verbose_name='Город')),
                ('hotel_owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='hotels', to=settings.AUTH_USER_MODEL, verbose_name='Владелец')),
            ],
            options={
                'verbose_name': 'Отель',
                'verbose_name_plural': 'Отели',
            },
        ),
        migrations.CreateModel(
            name='HotelImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hotel_image', models.ImageField(blank=True, null=True, upload_to='hotel_images/', verbose_name='Фото')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата загрузки')),
                ('hotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hotel_images', to='airbnb.hotel', verbose_name='Отель')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rev_text', models.TextField(verbose_name='Текст отзыва')),
                ('rev_stars', models.PositiveSmallIntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10')], null=True, verbose_name='Оценка')),
                ('rev_created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('rev_updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('rev_is_published', models.BooleanField(default=True, verbose_name='Опубликован?')),
                ('rev_reply', models.TextField(blank=True, null=True, verbose_name='Ответ администрации')),
                ('rev_hotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='airbnb.hotel', verbose_name='Отель')),
                ('rev_user_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Отзыв',
                'verbose_name_plural': 'Отзывы',
                'ordering': ['-rev_created_at'],
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_name', models.CharField(max_length=100, verbose_name='Название комнаты')),
                ('room_type', models.CharField(choices=[('single', 'Одноместный'), ('double', 'Двухместный'), ('suite', 'Люкс'), ('family', 'Семейный')], max_length=16, verbose_name='Тип комнаты')),
                ('room_status', models.CharField(choices=[('свободен', 'Свободен'), ('забронирован', 'Забронирован'), ('занят', 'Занят')], max_length=15, verbose_name='Статус комнаты')),
                ('room_available', models.BooleanField(default=True, verbose_name='Доступна для брони?')),
                ('room_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена за ночь')),
                ('room_description', models.TextField(max_length=1000, verbose_name='Описание комнаты')),
                ('room_description_en', models.TextField(max_length=1000, null=True, verbose_name='Описание комнаты')),
                ('room_description_ru', models.TextField(max_length=1000, null=True, verbose_name='Описание комнаты')),
                ('room_description_ky', models.TextField(max_length=1000, null=True, verbose_name='Описание комнаты')),
                ('room_capacity', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Вместимость')),
                ('room_bed_count', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Количество кроватей')),
                ('room_hotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='airbnb.hotel', verbose_name='Отель')),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in', models.DateTimeField(verbose_name='Дата заезда')),
                ('check_out', models.DateTimeField(verbose_name='Дата выезда')),
                ('guests_count', models.PositiveSmallIntegerField(default=1, verbose_name='Количество гостей')),
                ('total_price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Итоговая цена')),
                ('status_book', models.CharField(choices=[('отменено', 'Отменено'), ('подтверждено', 'Подтверждено'), ('ожидает', 'Ожидает подтверждения')], default='ожидает', max_length=20, verbose_name='Статус брони')),
                ('payment_status', models.CharField(choices=[('не оплачено', 'Не оплачено'), ('оплачено', 'Оплачено'), ('возврат', 'Возврат')], default='не оплачено', max_length=20, verbose_name='Статус оплаты')),
                ('special_requests', models.TextField(blank=True, null=True, verbose_name='Пожелания и специальные запросы')),
                ('user_book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('hotel_book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='airbnb.hotel', verbose_name='Отель')),
                ('room_book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='airbnb.room', verbose_name='Номер')),
            ],
        ),
        migrations.CreateModel(
            name='RoomImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_image', models.ImageField(blank=True, null=True, upload_to='room_images/', verbose_name='Фото комнаты')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='room_images', to='airbnb.room', verbose_name='Комната')),
            ],
        ),
    ]
